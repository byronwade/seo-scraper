{
  "url": "https://moz.com/blog/developer-to-seo",
  "slug": "developer-to-seo",
  "title": "How to Turn Yourself from a Great Developer to a Great SEO - MozMoz logoMenu openMenu closeSearchMoz logo",
  "description": "The work done by developers rarely hits the headlines but can often be the difference between success and failure in an SEO project. The following list may not be groundbreaking but then SEO often isn't. I think the following all fall under the heading of advanced common sense...",
  "content": "How to Turn Yourself from a Great Developer to a Great SEO Technical SEO D By: Duncan Morris July 5, 2008 The author's views are entirely their own (excluding the unlikely event of hypnosis) and may not always reflect the views of Moz. Table of Contents Copied! D By: Duncan Morris July 5, 2008 How to Turn Yourself from a Great Developer to a Great SEO Technical SEO The author's views are entirely their own (excluding the unlikely event of hypnosis) and may not always reflect the views of Moz. I'm hoping this post will become the first in a series of posts from me talking more about SEO from a developer's perspective. A lot of the posts around tend to be more centered on SEO from a marketing perspective. If you have anything you'd like to see covered, please leave a comment and I'll do my best. The work done by developers rarely hits the headlines but can often be the difference between success and failure in an SEO project. The following list may not be groundbreaking, but then SEO often isn't. I think the following all fall under the heading of advanced common sense... The way developers think makes us a special bunch and can give us an advantage in a number of tasks that a typical SEO will do regularly. Here is my list of things where thinking like a developer gives you an advantage over the more creative types. 1) Realise that you can get a long way with a great site I think there is a tendency for SEOs to dive in and start trying to gain exposure and links, often overlooking the massive improvements that can be gained from fixing things closer to home. Ensuring the basics are right should be the first step in any SEO project. In so many projects there are fundamental issues with the website that need to be fixed before the site will really reach its potential. Even if you aren't going to be making these changes, as a developer, identifying the issues and suggesting alternatives is slap bang in the middle of your skill set. I hate to let the secret slip, but getting these things right is not rocket science, and often boils down to plain old common sense. A great start would be to read the illustrated guide to building a search-friendly website. 2) Develop stuff! It turns out if you are good at building widgets you can cause quite a stir. Widgets, quizzes, and online tools sounds like something a developer would knock up (read carefully: craft). I'm sure that if you sat down for an hour you could think of something that would make the life of people in your industry better. Maybe you can make them more efficient, or just make life a little more enjoyable for them. Providing tools to other people in your industry is a fantastic way of helping to build inbound links. The inbound links to the seo tools and the IP Location Lookup tool in particular is no coincidence. 3) Test, tweak, rinse, repeat I don't imagine I'm the only developer that spends my life testing things. Rarely does a program work the first time. It turns out these skills aren't as common as you'd think. I always tell the story of when I was in my final year of a computer science course and earnt some pocket money by being a lab demonstrator. Every week, without fail, someone would ask me to help them fix a compile error along the lines of \"Missing ; on line 152.\" Every week I replied with \"Can you look at line 152, do you see anything missing?\" Anyway, me reminiscing isn't helping you become a great SEO. However, understanding how to test stuff does. Rather than relying on hearsay, gossip, and forums that are out of date, why not setup some tests. Does a h1 tag actually help? Don't take my word for it, set up two websites that are all but identical. Make up a random keyphrase, put it in a h1 on one site and in a p tag on the other and see what happens. Now don't get me wrong, I'm not saying you should ignore what is being said and re-invent the wheel, but there are a massive number of things that would benefit from a test. Ok, you want an example. I'd like to know what works better for geo-locating a website - microformats vs address? 4) Reverse engineer other sites I've just talked about testing and how these skills are not as common as you'd think. Another area where these skills are immensely valuable is when you are reverse engineering another site. An inquisitive mind and a few good tools will get you a long way. For those of you not used to this sort of detective work, I'd recommend starting off by installing the user agent switcher, upgrading the user agents list, and setting your browser to identify as Googlebot. Now simply sit back and get on with your job. Within hours I guarantee you'll see something weird happening. Simply work out what is happening. Once you know what is happening, all you have to do is think about what the website is trying to accomplish. I promise you, no one codes cloaking based on user agent by accident. Other things to try include disabling javascript and blocking all cookies. Try this on all your clients. If things go a bit funky, then you can jump in and save the day. Finally, for the real geeks among you, try browsing with lynx. A site that works well with lynx, both technically and in terms of the users, is likely to work fairly well for the search engines. Quite often a site will 'work' but will be so badly architected that it may as well be in Flash. I've said it before and I'll say it again, a well architected site is worth its weight in gold, both to the search engines and to the users of the site. 5) Become a blackhat! If all else fails, turn blackhat. Most of the blackhats I've met are developers at heart. Blackhat is all about doing something dodgy (by which I mean against Google's T&Cs) once, then working out how to get a computer to do it whilst you sleep. Link farms, comment spam, write once, computer repeats for you. No content to write, no networking to do...hang on, why am I still whitehat? Apart from the \"doing something dodgy\" part, that last paragraph can also be applied to whitehat. By automating tasks you do on a regular basis, you can end up doing more work with less effort. 6) Don't be afraid to learn As a developer I feel like I never stop learning. There is always another API to get your head around. When presented with often badly written documentation, most people run a mile. A developer, on the other hand, jumps in, tries stuff, and eventually hacks something together (the fact that this needs to be deleted and re-written, but never is, is neither here nor there). The difference between a developer and a 'normal' person is that a developer presses buttons to see what happens. A 'normal' person is scared to press a button in case they break something. So go ahead and learn something new. Why not get your head around some stats. Perhaps you could 'knock up a online regression tool' while you're at it. The last point is the one area where a developer (in general) pretty much sucks. Networking, speaking to people, putting yourself out there. I know it's hard, but having a trusted network is a massive shortcut to being a truly great SEO. 7) Break the stereotype One of things I'm least good at is networking, online. I have a Twitter account but I don't say much. I'm self-conscious about what I say, so I often write replies, re-write them, then delete them. However, if you really want to become a great SEO, building up a network is a fantastic way of opening doors and getting your name out there. Luckily, I can just piggy back on the networking that Will and Tom do. I think it is worth saying that the way to become great at anything is to play to your strengths. I long ago realised that I am far better placed sitting in my corner coding stuff than trying to be overly creative. So, let's get some debate going. What else do developers do better than everyone else? Copied! Back to Top",
  "headers": [
    {
      "level": "H4",
      "text": "Discover top competitors’ winning content"
    },
    {
      "level": "H4",
      "text": "What is your Brand Authority?"
    },
    {
      "level": "H4",
      "text": "Unlock flexible pricing & new endpoints"
    },
    {
      "level": "H4",
      "text": "Surface actionable competitive intel"
    },
    {
      "level": "H1",
      "text": "How to Turn Yourself from a Great Developer to a Great SEO"
    },
    {
      "level": "H3",
      "text": "Table of Contents"
    },
    {
      "level": "H1",
      "text": "How to Turn Yourself from a Great Developer to a Great SEO"
    },
    {
      "level": "H2",
      "text": "With Moz Pro, you have the tools you need to get SEO right — all in one place."
    },
    {
      "level": "H2",
      "text": "Read Next"
    },
    {
      "level": "H3",
      "text": "How to Optimize E-commerce Sitemaps with 1M+ Pages — Whiteboard Friday"
    },
    {
      "level": "H3",
      "text": "7 Ways SEO and Product Teams Can Collaborate to Ensure Success"
    },
    {
      "level": "H3",
      "text": "6 Things SEOs Should Advocate for When Building a Headless Website — Whiteboard Friday"
    },
    {
      "level": "H2",
      "text": "Comments"
    }
  ],
  "author": "Duncan Morris\n          \n            Duncan Morris"
}